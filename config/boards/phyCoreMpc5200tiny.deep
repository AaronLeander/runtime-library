#deep-1

meta {
	version = "2012-07-04";
	description = "Bord description file for Phytec phyCORE-MPC5200tiny";
}

board phyCoreMpc5200tiny {
	description = "Phytec phyCORE-MPC5200tiny";
	cputype = MPC5200;
	
	sysconst {
		extRamBase   = 0x0;						        # starting at 0x0
		extRamSize   = 0x8000000;						# 128M external RAM
	
		extFlashBase = 0xFF000000;						# starting at 0xFF000000
		extFlashSize = 0x1000000;						# 16M external Flash

		excpCodeBase = extFlashBase;					# Base address for exception code
		excpCodeSize = 0x3000;							# Exception code size
		#Martin, warum haben exc code Base steigende adressen?
		
#		sysTabBaseAddr = excpCodeBase + excpCodeSize;	# Place system table behind exception code
		sysTabBaseAddr = excpCodeSize;	# Place system table behind exception code
		
		reservedSpaceSize = 0x8000;
		
		stackSize = 0x2000;								# Default stack size
		heapSize = 0x40000;								# Default heap size
		
		SRR1init = 0x3802;								# Initial value of Machine Status Save/Restore Register 1
	}
	
	memorymap {

		# ===== External RAM =====
		device ExternalRam {							# External RAM device configuration
			base = extRamBase;
			size = extRamSize;
			width = 4;
			technology = ram;
			attributes = read, write;
		}
		
		segment ExternalRam.ExceptionCode {			# Exception code
			base = extRamBase;
			size = excpCodeSize;
			attributes = read, code;
		}
		  
		segment ExternalRam.SysTab {					# Default Segment for code, constants and class fields
			base = extRamBase + excpCodeSize;						# Place system table behind exception code
			attributes = read, systab;
		}

		segment ExternalRam.Default {
#			base = extRamBase + excpCodeSize;
			attributes = read, write, const, code, var;
		}

		segment ExternalRam.Stack {
			attributes = read, write, stack;
			size = stackSize;
			base = extRamBase + extRamSize - stackSize;	# Place it at the end of the device
		}

		segment ExternalRam.Heap {						# Default Segment for the heap
			base = extRamBase + extRamSize - stackSize - heapSize;
			size = heapSize;
			attributes = read, write, heap;
		}
		
		# ===== External Flash =====
		device ExternalFlash {							# External flash device configuration
			base = extFlashBase;
			size = extFlashSize;
			width = 4;
			technology = flash;
			memorytype = "IntelStrata";
			attributes = read;
			
			memorysector Sec0 {							# First sector is used exception code and system table
				base = extFlashBase;
				sectorsize = 0x08000;					# 32k
			}
			memorysector Sec1 {
				base = extFlashBase + 0x08000;
				sectorsize = 0x04000;					# 16k
			}
#			memorysector BS_2 {
#				base = extFlashBase + 0x0C000;
#				sectorsize = 0x04000;					# 16k
#			}
#			memorysector BS_3 {
#				base = extFlashBase + 0x10000;
#				sectorsize = 0x10000;					# 64k
#			}
#			memorysectorarray DS {
#				base = extFlashBase + 0x20000;
#				sectorsize = 0x20000;					# 128k
#				nofsectors = 31;						# 31 * 128k = 3968k
#			}
		}
		
		segment ExternalFlash.ExceptionCode {			# Exception code
			base = extFlashBase;
			size = excpCodeSize;
			attributes = read, code;
		}
		  
		segment ExternalFlash.SysTab {					# Default Segment for code, constants and class fields
			base = sysTabBaseAddr;						# Place system table behind exception code
			attributes = read, systab;
		}

		segment ExternalFlash.Default {					# Default Segment for code, constants and class fields
#			base = extFlashBase + reservedSpaceSize;	# Place it behind the exception code and the system table
			attributes = read, const, code;
		}
	}
	
#	reginit {
#		
#	}

	targetconfiguration DefaultBoot {
		system {
			systemtable: systab@ExternalFlash.SysTab;
		}
		modules {
			kernel, heap: code@ExternalFlash.Default, const@ExternalFlash.Default, var@ExternalRam.Default;
			exception: code@ExternalFlash.ExceptionCode, const@ExternalFlash.Default, var@ExternalRam.Default;
			default: code@ExternalFlash.Default, const@ExternalFlash.Default, var@ExternalRam.Default;           
		}
#		reginit {
#			
#		}
	}
	
	targetconfiguration RamOnlyBoot {
		system {
			systemtable: systab@ExternalRam.SysTab;
		}
		modules {
			kernel, heap: code@ExternalRam.Default, const@ExternalRam.Default, var@ExternalRam.Default;
			exception: code@ExternalRam.ExceptionCode, const@ExternalRam.Default, var@ExternalRam.Default;
			default: code@ExternalRam.Default, const@ExternalRam.Default, var@ExternalRam.Default;           
		}
#		reginit {
#			
#		}
	}

}