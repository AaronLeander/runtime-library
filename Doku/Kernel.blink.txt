	public static void blink(int nTimes) {
		HWD.PUT2(MPIOSMDDR, HWD.GET2(MPIOSMDDR) | 0x8000);
		for (int i = 0; i < nTimes; i++) {
			HWD.PUT2(MPIOSMDR, HWD.GET2(MPIOSMDR) | 0x8000);
			for (int k = 0; k < 10000; k++);
			HWD.PUT2(MPIOSMDR, HWD.GET2(MPIOSMDR) & ~0x8000);
			for (int k = 0; k < 10000; k++);
		}
		for (int k = 0; k < (1000000 - nTimes * 10000); k++);
	}

build intervals for blink
assign registers to parameters, nofParam = 1
[(Integer)r31]
allocate registers
register reserved for phi function at 35 reg = 30
register reserved for phi function at 21 reg = 2

SSA for Method: blink
   SSANode 0:
      EntrySet {[ , , , ], [ , , ]}
         0: NoOpnd[sCloadConst] 3170562 (Integer),   end=5, reg=30
         1: NoOpnd[sCloadConst] 3170562 (Integer),   end=2, reg=2
         2: Call[sCcall] {1} (Short),   GET2,   end=4, reg=2
         3: NoOpnd[sCloadConst] 32768 (Integer),   end=4, reg=3
         4: Dyadic[sCor] {2, 3} (Integer),   end=5, reg=2
         5: Call[sCcall] {0, 4} (Void),   PUT2,   end=5
         6: NoOpnd[sCloadConst] 0 (Integer),   end=42, index=1, reg=30, join={35}
         7: NoOpnd[sCloadLocal] (Integer),   end=41, index=0, reg=31, join={34}
         8: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ 7 (Integer), 6 (Integer), ]}

   SSANode 1:
      EntrySet {[ , , , ], [ Phi-Function(41), Phi-Function(42), Phi-Function(43) ]}
         9: NoOpnd[sCloadConst] 3170560 (Integer),   end=14, reg=29
         10: NoOpnd[sCloadConst] 3170560 (Integer),   end=11, reg=2
         11: Call[sCcall] {10} (Short),   GET2,   end=13, reg=2
         12: NoOpnd[sCloadConst] 32768 (Integer),   end=13, reg=3
         13: Dyadic[sCor] {11, 12} (Integer),   end=14, reg=2
         14: Call[sCcall] {9, 13} (Void),   PUT2,   end=14
         15: NoOpnd[sCloadConst] 0 (Integer),   end=21, index=2, reg=2, join={21}
         16: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(41), Phi-Function(42), 15 (Integer) ]}

   SSANode 2:
      EntrySet {[ , , , ], [ Phi-Function(19), Phi-Function(20), Phi-Function(21) ]}
         17: NoOpnd[sCloadConst] 1 (Integer),   end=18
         18: Dyadic[sCadd] {21, 17} (Integer),   end=21, index=2, reg=2, join={21}
      ExitSet {[ , , , ], [ Phi-Function(19), Phi-Function(20), 18 (Integer) ]}

   SSANode 3:
      EntrySet {[ , , , ], [ Phi-Function(19), Phi-Function(20), Phi-Function(21) ]}
         19: PhiFunction[sCPhiFunc] {41} (Phi-Function),   start=19, end=34, index=0, reg=31, join={34} deleted
         20: PhiFunction[sCPhiFunc] {42} (Phi-Function),   start=20, end=44, index=1, reg=30, join={35} deleted
         21: PhiFunction[sCPhiFunc] {15, 18} (Phi-Function),   start=15, end=23, index=2, reg=2
         22: NoOpnd[sCloadConst] 10000 (Integer),   end=23
         23: Branch[sCBranch] {22, 21} (Void)
      ExitSet {[ , , , ], [ Phi-Function(19), Phi-Function(20), Phi-Function(21) ]}

   SSANode 4:
      EntrySet {[ , , , ], [ Phi-Function(19), Phi-Function(20), Phi-Function(21) ]}
         24: NoOpnd[sCloadConst] 3170560 (Integer),   end=29, reg=29
         25: NoOpnd[sCloadConst] 3170560 (Integer),   end=26, reg=2
         26: Call[sCcall] {25} (Short),   GET2,   end=28, reg=2
         27: NoOpnd[sCloadConst] -32769 (Integer),   end=28, reg=3
         28: Dyadic[sCand] {26, 27} (Integer),   end=29, reg=2
         29: Call[sCcall] {24, 28} (Void),   PUT2,   end=29
         30: NoOpnd[sCloadConst] 0 (Integer),   end=36, index=2, reg=2, join={36}
         31: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(19), Phi-Function(20), 30 (Integer) ]}

   SSANode 5:
      EntrySet {[ , , , ], [ Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}
         32: NoOpnd[sCloadConst] 1 (Integer),   end=33
         33: Dyadic[sCadd] {36, 32} (Integer),   end=36, index=2, reg=2, join={36}
      ExitSet {[ , , , ], [ Phi-Function(34), Phi-Function(35), 33 (Integer) ]}

   SSANode 6:
      EntrySet {[ , , , ], [ Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}
         34: PhiFunction[sCPhiFunc] {19} (Phi-Function),   start=7, end=41, index=0, reg=31 deleted
         35: PhiFunction[sCPhiFunc] {20} (Phi-Function),   start=6, end=42, index=1, reg=30 deleted
         36: PhiFunction[sCPhiFunc] {30, 33} (Phi-Function),   start=30, end=43, index=2, reg=2, join={43}
         37: NoOpnd[sCloadConst] 10000 (Integer),   end=38
         38: Branch[sCBranch] {37, 36} (Void)
      ExitSet {[ , , , ], [ Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}

   SSANode 7:
      EntrySet {[ , , , ], [ Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}
         39: NoOpnd[sCloadConst] 1 (Integer),   end=40
         40: Dyadic[sCadd] {35, 39} (Integer),   end=42, index=1, reg=30, join={35}
      ExitSet {[ , , , ], [ Phi-Function(34), 40 (Integer), Phi-Function(36) ]}

   SSANode 8:
      EntrySet {[ , , , ], [ Phi-Function(41), Phi-Function(42), Phi-Function(43) ]}
         41: PhiFunction[sCPhiFunc] {7} (Phi-Function),   start=41, end=49, index=0, reg=31, join={49} deleted
         42: PhiFunction[sCPhiFunc] {6, 40} (Phi-Function),   start=42, end=44, index=1, reg=30, join={20}
         43: PhiFunction[sCPhiFunc] {36} (Phi-Function),   start=36, end=51, index=2, reg=2, join={51} deleted
         44: Branch[sCBranch] {41, 42} (Void)
      ExitSet {[ , , , ], [ Phi-Function(41), Phi-Function(42), Phi-Function(43) ]}

   SSANode 9:
      EntrySet {[ , , , ], [ Phi-Function(41), Phi-Function(42), Phi-Function(43) ]}
         45: NoOpnd[sCloadConst] 0 (Integer),   end=50, index=1, reg=30, join={50}
         46: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(41), 45 (Integer), Phi-Function(43) ]}

   SSANode 10:
      EntrySet {[ , , , ], [ Phi-Function(49), Phi-Function(50), Phi-Function(51) ]}
         47: NoOpnd[sCloadConst] 1 (Integer),   end=48
         48: Dyadic[sCadd] {50, 47} (Integer),   end=50, index=1, reg=30, join={50}
      ExitSet {[ , , , ], [ Phi-Function(49), 48 (Integer), Phi-Function(51) ]}

   SSANode 11:
      EntrySet {[ , , , ], [ Phi-Function(49), Phi-Function(50), Phi-Function(51) ]}
         49: PhiFunction[sCPhiFunc] {41} (Phi-Function),   start=41, end=54, index=0, reg=31 deleted
         50: PhiFunction[sCPhiFunc] {45, 48} (Phi-Function),   start=45, end=56, index=1, reg=30
         51: PhiFunction[sCPhiFunc] {43} (Phi-Function),   start=43, end=51, index=2, reg=2 deleted
         52: NoOpnd[sCloadConst] 1000000 (Integer),   end=55, reg=2
         53: NoOpnd[sCloadConst] 10000 (Integer),   end=54
         54: Dyadic[sCmul] {49, 53} (Integer),   end=55, reg=3
         55: Dyadic[sCsub] {52, 54} (Integer),   end=56, reg=2
         56: Branch[sCBranch] {55, 50} (Void)
      ExitSet {[ , , , ], [ Phi-Function(49), Phi-Function(50), Phi-Function(51) ]}

   SSANode 12:
      EntrySet {[ , , , ], [ Phi-Function(49), Phi-Function(50), Phi-Function(51) ]}
         57: Branch[sCreturn]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(49), Phi-Function(50), Phi-Function(51) ]}

Code for Method: blink
	9421ffe0	[0x0]	stwu  r1, -32(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001001c	[0x8]	stw  r0, 28(r1)
	bfa10008	[0xc]	stmw  r29, 8(r1)
	7c5f1378	[0x10]	lr  r31, r2
	3bc06102	[0x14]	li  r30, 24834
	3fde0030	[0x18]	addis  r30, r30, 48
	38406102	[0x1c]	li  r2, 24834
	3c420030	[0x20]	addis  r2, r2, 48
	a8420000	[0x24]	lha  r2, 0(r2)
	38608000	[0x28]	li  r3, -32768
	3c630001	[0x2c]	addis  r3, r3, 1
	7c421b78	[0x30]	or  r2, r2, r3
	b05e0000	[0x34]	sth  r2, 0(r30)
	3bc00000	[0x38]	li  r30, 0
	48000078	[0x3c]	b  120, [0xb4]	
	3ba06100	[0x40]	li  r29, 24832
	3fbd0030	[0x44]	addis  r29, r29, 48
	38406100	[0x48]	li  r2, 24832
	3c420030	[0x4c]	addis  r2, r2, 48
	a8420000	[0x50]	lha  r2, 0(r2)
	38608000	[0x54]	li  r3, -32768
	3c630001	[0x58]	addis  r3, r3, 1
	7c421b78	[0x5c]	or  r2, r2, r3
	b05d0000	[0x60]	sth  r2, 0(r29)
	38400000	[0x64]	li  r2, 0
	48000008	[0x68]	b  8, [0x70]	
	38420001	[0x6c]	addi  r2, r2, 1
	2c022710	[0x70]	cmpi  crf0, 0, r2, 10000
	419ffff8	[0x74]	bc  iftrue, CRF0[LT], -8, [0x6c]	
	3ba06100	[0x78]	li  r29, 24832
	3fbd0030	[0x7c]	addis  r29, r29, 48
	38406100	[0x80]	li  r2, 24832
	3c420030	[0x84]	addis  r2, r2, 48
	a8420000	[0x88]	lha  r2, 0(r2)
	38607fff	[0x8c]	li  r3, 32767
	3c63ffff	[0x90]	addis  r3, r3, -1
	7c421838	[0x94]	and  r2, r2, r3
	b05d0000	[0x98]	sth  r2, 0(r29)
	38400000	[0x9c]	li  r2, 0
	48000008	[0xa0]	b  8, [0xa8]	
	38420001	[0xa4]	addi  r2, r2, 1
	2c022710	[0xa8]	cmpi  crf0, 0, r2, 10000
	419ffff8	[0xac]	bc  iftrue, CRF0[LT], -8, [0xa4]	
	3bde0001	[0xb0]	addi  r30, r30, 1
	7c1ef800	[0xb4]	cmp crf0, 0, r30, r31
	419fff88	[0xb8]	bc  iftrue, CRF0[LT], -120, [0x40]	
	3bc00000	[0xbc]	li  r30, 0
	48000008	[0xc0]	b  8, [0xc8]	
	3bde0001	[0xc4]	addi  r30, r30, 1
	38404240	[0xc8]	li  r2, 16960
	3c42000f	[0xcc]	addis  r2, r2, 15
	1c7f2710	[0xd0]	mulli  r3, r31, 10000
	7c431050	[0xd4]	subf  r2, r3, r2
	7c1e1000	[0xd8]	cmp crf0, 0, r30, r2
	419fffe8	[0xdc]	bc  iftrue, CRF0[LT], -24, [0xc4]	
	bba10008	[0xe0]	lmw  r29, 8(r1)
	8001001c	[0xe4]	lwz  r0, 28(r1)
	7c0803a6	[0xe8]	mtspr  LR, r0
	38210020	[0xec]	addi  r1, r1, 32
	4e800020	[0xf0]	bclr always, CRF7[SO]
