public class OutTest1 {

	static void run() {
		for (int i = 0; i < 10000000; i++);
		SCI1Plain.send((byte)65);
	}

	static {
		SCI1Plain.start();
		run();
	}
}

build intervals for <clinit>
assign registers to parameters, nofParam = 0
[]
allocate registers
SSA for Method: <clinit>
   SSANode 0:
      EntrySet {}
         0: Call[sCcall] {} (Void),   start,   end=0
         1: Call[sCcall] {} (Void),   run,   end=1
         2: Branch[sCreturn]  (Void)
      ExitSet {}

Code for Method: <clinit>
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	38400000	[0xc]	li  r2, 0
	3c420000	[0x10]	addis  r2, r2, 0
	7c4803a6	[0x14]	mtspr  LR, r2
	4e800020	[0x18]	bclr always, CRF7[SO]
	38400003	[0x1c]	li  r2, 3
	3c420000	[0x20]	addis  r2, r2, 0
	7c4803a6	[0x24]	mtspr  LR, r2
	4e800020	[0x28]	bclr always, CRF7[SO]
	8001000c	[0x2c]	lwz  r0, 12(r1)
	7c0803a6	[0x30]	mtspr  LR, r0
	38210010	[0x34]	addi  r1, r1, 16
	4e800020	[0x38]	bclr always, CRF7[SO]
>>>> Method: run, accAndPropFlags: 1000008
build intervals for run
assign registers to parameters, nofParam = 0
[]
allocate registers
register reserved for phi function at 4 reg = 2
SSA for Method: run
   SSANode 0:
      EntrySet {[ , ], [ ]}
         0: NoOpnd[sCloadConst] 0 (Integer),   end=4, index=2, reg=2, join={4}
         1: Branch[sCBranch]  (Void)
      ExitSet {[ , ], [ 0 (Integer) ]}

   SSANode 1:
      EntrySet {[ , ], [ 4 (Integer) ]}
         2: NoOpnd[sCloadConst] 1 (Integer),   end=3
         3: Dyadic[sCadd] {4, 2} (Integer),   end=4, index=2, reg=2, join={4}
      ExitSet {[ , ], [ 3 (Integer) ]}

   SSANode 2:
      EntrySet {[ , ], [ 4 (Integer) ]}
         4: PhiFunction[sCPhiFunc] {0, 3} (Integer),   start=0, end=6, index=2, reg=2
         5: NoOpnd[sCloadConst] 10000000 (Integer),   end=6, reg=3
         6: Branch[sCBranch] {5, 4} (Void)
      ExitSet {[ , ], [ 4 (Integer) ]}

   SSANode 3:
      EntrySet {[ , ], [ 4 (Integer) ]}
         7: NoOpnd[sCloadConst] 65 (Integer),   end=8, reg=2
         8: Call[sCcall] {7} (Void),   send,   end=8
         9: Branch[sCreturn]  (Void)
      ExitSet {[ , ], [ 4 (Integer) ]}

Code for Method: run
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	38400000	[0xc]	li  r2, 0
	48000008	[0x10]	b  8, [0x18]
	38420001	[0x14]	addi  r2, r2, 1
	38609680	[0x18]	li  r3, -27008
	3c630099	[0x1c]	addis  r3, r3, 153
	7c021800	[0x20]	cmp crf0, 0, r2, r3
	419ffff0	[0x24]	bc  iftrue, CRF0[LT], -16, [0x14]
	38400041	[0x28]	li  r2, 65
	38600000	[0x2c]	li  r3, 0
	3c630000	[0x30]	addis  r3, r3, 0
	7c6803a6	[0x34]	mtspr  LR, r3
	4e800020	[0x38]	bclr always, CRF7[SO]
	8001000c	[0x3c]	lwz  r0, 12(r1)
	7c0803a6	[0x40]	mtspr  LR, r0
	38210010	[0x44]	addi  r1, r1, 16
	4e800020	[0x48]	bclr always, CRF7[SO]
>>>> Method: <init>, accAndPropFlags: 1
build intervals for <init>
assign registers to parameters, nofParam = 1
[(Ref)r2]
allocate registers
SSA for Method: <init>
   SSANode 0:
      EntrySet {[ ], [ ]}
         0: NoOpnd[sCloadLocal] (Ref),   end=1, index=1, reg=2
         1: Call[sCcall] {0} (Void),   <init>,   end=1
         2: Branch[sCreturn]  (Void)
      ExitSet {[ ], [ 0 (Ref) ]}

Code for Method: <init>
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	c820000	[0xc]	twi  ifequal, r2, 0
	8062fffc	[0x10]	lwz  r3, -4(r2)
	80630000	[0x14]	lwz  r3, 0(r3)
	7c6803a6	[0x18]	mtspr  LR, r3
	4e800020	[0x1c]	bclr always, CRF7[SO]
	8001000c	[0x20]	lwz  r0, 12(r1)
	7c0803a6	[0x24]	mtspr  LR, r0
	38210010	[0x28]	addi  r1, r1, 16
	4e800020	[0x2c]	bclr always, CRF7[SO]
