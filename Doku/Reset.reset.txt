	static void reset() {
		int stackBase = US.GET4(sysTabBaseAddr + stStackOffset + 4);
		int stackSize = US.GET4(sysTabBaseAddr + stStackOffset + 8);
		US.PUTGPR(1, stackBase + stackSize - 4);	// set stack pointer
		int clinitAddr = US.GET4(US.GET4(sysTabBaseAddr + 12));	// addr of clinit of kernel
		US.PUTSPR(SRR0, clinitAddr);
		US.PUTSPR(SRR1, SRR1init);
		US.ASM("rfi");
	}

build intervals for reset
assign registers to parameters, nofParam = 0
[]
allocate registers
SSA for Method: reset
   SSANode 0:
      EntrySet {[ , , ], [ , , ]}
         0: NoOpnd[sCloadConst] 4167688 (Integer),   end=1, reg=2
         1: Call[sCcall] {0} (Integer),   GET4,   end=5, index=3, reg=2
         2: NoOpnd[sCloadConst] 4167692 (Integer),   end=3, reg=3
         3: Call[sCcall] {2} (Integer),   GET4,   end=5, index=4, reg=3
         4: NoOpnd[sCloadConst] 1 (Integer),   end=8
         5: Dyadic[sCadd] {1, 3} (Integer),   end=7, reg=2
         6: NoOpnd[sCloadConst] 4 (Integer),   end=7
         7: Dyadic[sCsub] {5, 6} (Integer),   end=8, reg=2
         8: Call[sCcall] {4, 7} (Void),   PUTGPR,   end=8
         9: NoOpnd[sCloadConst] 4167692 (Integer),   end=10, reg=2
         10: Call[sCcall] {9} (Integer),   GET4,   end=11, reg=2
         11: Call[sCcall] {10} (Integer),   GET4,   end=13, index=5, reg=2
         12: NoOpnd[sCloadConst] 26 (Integer),   end=13
         13: Call[sCcall] {12, 11} (Void),   PUTSPR,   end=13
         14: NoOpnd[sCloadConst] 27 (Integer),   end=16
         15: NoOpnd[sCloadConst] 14338 (Integer),   end=16, reg=2
         16: Call[sCcall] {14, 15} (Void),   PUTSPR,   end=16
         17: NoOpnd[sCloadConst] ,   end=18, reg=2
         18: Call[sCcall] {17} (Void),   ASM,   end=18
         19: Branch[sCreturn]  (Void)
      ExitSet {[ , , ], [ 1 (Integer), 3 (Integer), 11 (Integer) ]}

Code for Method: reset
	38409808	[0x0]	li  r2, -26616
	3c420040	[0x4]	addis  r2, r2, 64
	80420000	[0x8]	lwz  r2, 0(r2)
	3860980c	[0xc]	li  r3, -26612
	3c630040	[0x10]	addis  r3, r3, 64
	80630000	[0x14]	lwz  r3, 0(r3)
	7c421a14	[0x18]	add  r2, r2, r3
	3842fffc	[0x1c]	addi  r2, r2, -4
	7c411378	[0x20]	lr  r1, r2
	3840980c	[0x24]	li  r2, -26612
	3c420040	[0x28]	addis  r2, r2, 64
	80420000	[0x2c]	lwz  r2, 0(r2)
	80420000	[0x30]	lwz  r2, 0(r2)
	7c401378	[0x34]	lr  r0, r2
	7c1a03a6	[0x38]	mtspr  SRR0, r0
	38403802	[0x3c]	li  r2, 14338
	7c401378	[0x40]	lr  r0, r2
	7c1b03a6	[0x44]	mtspr  SRR1, r0
	38400000	[0x48]	li  r2, 0
	3c420000	[0x4c]	addis  r2, r2, 0
	4c000064	[0x50]	rfi
