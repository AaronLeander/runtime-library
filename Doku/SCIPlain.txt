public class SCI1Plain {

	static final int SCC1R0 = 0x305008;	// SCI1 control register 0
	static final int SCC1R1 = 0x30500A; 	// SCI1 control register 1
	static final int SC1SR = 0x30500C; 	// SCI1 status register
	static final int SC1DR = 0x30500E; 	// SCI1 data register
	static final byte TDRE = 8;	// Transmit Data Register Empty Flag in SC1SR
	static final byte RDRF = 6;	// Receive Data Register Full Flag in SC1SR

	public static void stop() {
		US.PUT2(SCC1R1, 0);	//  TE, RE = 0
	}

	public static void start() {
		US.PUT2(SCC1R0,  130); 	// baud rate
		US.PUT2(SCC1R1, 0x0C);	// no parity, 8 data bits, enable tx and rx
	}

	public static void send(byte b) {	// blocking
		US.PUT2(SC1DR, b);
		short status;
		do
			status = US.GET2(SC1SR);
		while ((status & (1<<TDRE)) == 0);
	}

	public static byte receive() {	// blocking
		short status;
		do
			status = US.GET2(SC1SR);
		while ((status & (1<<RDRF)) == 0);
		short data = US.GET2(SC1DR);
		return (byte)data;
	}


}

build intervals for stop
assign registers to parameters, nofParam = 0
[]
allocate registers
SSA for Method: stop
   SSANode 0:
      EntrySet {[ , ]}
         0: NoOpnd[sCloadConst] 3166218 (Integer),   end=2, reg=2
         1: NoOpnd[sCloadConst] 0 (Integer),   end=2, reg=3
         2: Call[sCcall] {0, 1} (Void),   PUT2,   end=2
         3: Branch[sCreturn]  (Void)
      ExitSet {[ , ]}

Code for Method: stop
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	3840500a	[0xc]	li  r2, 20490
	3c420030	[0x10]	addis  r2, r2, 48
	38600000	[0x14]	li  r3, 0
	b0620000	[0x18]	sth  r3, 0(r2)
	8001000c	[0x1c]	lwz  r0, 12(r1)
	7c0803a6	[0x20]	mtspr  LR, r0
	38210010	[0x24]	addi  r1, r1, 16
	4e800020	[0x28]	bclr always, CRF7[SO]
>>>> Method: start, accAndPropFlags: 1000009
build intervals for start
assign registers to parameters, nofParam = 0
[]
allocate registers
SSA for Method: start
   SSANode 0:
      EntrySet {[ , ]}
         0: NoOpnd[sCloadConst] 3166216 (Integer),   end=2, reg=2
         1: NoOpnd[sCloadConst] 130 (Integer),   end=2, reg=3
         2: Call[sCcall] {0, 1} (Void),   PUT2,   end=2
         3: NoOpnd[sCloadConst] 3166218 (Integer),   end=5, reg=2
         4: NoOpnd[sCloadConst] 12 (Integer),   end=5, reg=3
         5: Call[sCcall] {3, 4} (Void),   PUT2,   end=5
         6: Branch[sCreturn]  (Void)
      ExitSet {[ , ]}

Code for Method: start
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	38405008	[0xc]	li  r2, 20488
	3c420030	[0x10]	addis  r2, r2, 48
	38600082	[0x14]	li  r3, 130
	b0620000	[0x18]	sth  r3, 0(r2)
	3840500a	[0x1c]	li  r2, 20490
	3c420030	[0x20]	addis  r2, r2, 48
	3860000c	[0x24]	li  r3, 12
	b0620000	[0x28]	sth  r3, 0(r2)
	8001000c	[0x2c]	lwz  r0, 12(r1)
	7c0803a6	[0x30]	mtspr  LR, r0
	38210010	[0x34]	addi  r1, r1, 16
	4e800020	[0x38]	bclr always, CRF7[SO]
>>>> Method: send, accAndPropFlags: 1000009
build intervals for send
assign registers to parameters, nofParam = 1
[(Byte)r2]
allocate registers
SSA for Method: send
   SSANode 0:
      EntrySet {[ , ], [ , ]}
         0: NoOpnd[sCloadConst] 3166222 (Integer),   end=2, reg=3
         1: NoOpnd[sCloadLocal] (Integer),   end=3, index=2, reg=2, join={3}
         2: Call[sCcall] {0, 1} (Void),   PUT2,   end=2
      ExitSet {[ , ], [ 1 (Integer), ]}

   SSANode 1:
      EntrySet {[ , ], [ 3 (Integer), 4 (Short) ]}
         3: PhiFunction[sCPhiFunc] {1} (Integer),   start=1, end=3, index=2, reg=2 deleted
         4: PhiFunction[sCPhiFunc] {6} (Short),   start=4, end=8, index=3, reg=2 deleted
         5: NoOpnd[sCloadConst] 3166220 (Integer),   end=6, reg=3
         6: Call[sCcall] {5} (Short),   GET2,   end=8, index=3, reg=2, join={4}
         7: NoOpnd[sCloadConst] 256 (Integer),   end=8
         8: Dyadic[sCand] {6, 7} (Integer),   end=9, reg=2
         9: Branch[sCBranch] {8} (Void)
      ExitSet {[ , ], [ 3 (Integer), 6 (Short) ]}

   SSANode 2:
      EntrySet {[ , ], [ 3 (Integer), 6 (Short) ]}
         10: Branch[sCreturn]  (Void)
      ExitSet {[ , ], [ 3 (Integer), 6 (Short) ]}

Code for Method: send
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	3860500e	[0xc]	li  r3, 20494
	3c630030	[0x10]	addis  r3, r3, 48
	b0430000	[0x14]	sth  r2, 0(r3)
	3860500c	[0x18]	li  r3, 20492
	3c630030	[0x1c]	addis  r3, r3, 48
	a8430000	[0x20]	lha  r2, 0(r3)
	70420100	[0x24]	andi. r2, r2, 0x100
	2c020000	[0x28]	cmpi  crf0, 0, r2, 0
	419dffec	[0x2c]	bc  iftrue, CRF0[EQ], -20, [0x18]
	8001000c	[0x30]	lwz  r0, 12(r1)
	7c0803a6	[0x34]	mtspr  LR, r0
	38210010	[0x38]	addi  r1, r1, 16
	4e800020	[0x3c]	bclr always, CRF7[SO]
>>>> Method: receive, accAndPropFlags: 9
build intervals for receive
assign registers to parameters, nofParam = 0
[]
allocate registers
SSA for Method: receive
   SSANode 0:
      EntrySet {[ , ], [ , ]}
         0: NoOpnd[sCloadConst] 3166220 (Integer),   end=1, reg=2
         1: Call[sCcall] {0} (Short),   GET2,   end=3, index=2, reg=2
         2: NoOpnd[sCloadConst] 64 (Integer),   end=3
         3: Dyadic[sCand] {1, 2} (Integer),   end=4, reg=2
         4: Branch[sCBranch] {3} (Void)
      ExitSet {[ , ], [ 1 (Short), ]}

   SSANode 1:
      EntrySet {[ , ], [ 1 (Short), ]}
         5: NoOpnd[sCloadConst] 3166222 (Integer),   end=6, reg=2
         6: Call[sCcall] {5} (Short),   GET2,   end=7, index=3, reg=2
         7: Monadic[sCconvInt] {6} (Byte),   end=8, reg=2
         8: Branch[sCreturn] {7} (Void)
      ExitSet {[ , ], [ 1 (Short), 6 (Short) ]}

Code for Method: receive
	9421ffe0	[0x0]	stwu  r1, -32(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001001c	[0x8]	stw  r0, 28(r1)
	3840500c	[0xc]	li  r2, 20492
	3c420030	[0x10]	addis  r2, r2, 48
	a8420000	[0x14]	lha  r2, 0(r2)
	70420040	[0x18]	andi. r2, r2, 0x40
	2c020000	[0x1c]	cmpi  crf0, 0, r2, 0
	419dffec	[0x20]	bc  iftrue, CRF0[EQ], -20, [0xc]
	3840500e	[0x24]	li  r2, 20494
	3c420030	[0x28]	addis  r2, r2, 48
	a8420000	[0x2c]	lha  r2, 0(r2)
	7c420774	[0x30]	extsb  r2, r2
	8001001c	[0x34]	lwz  r0, 28(r1)
	7c0803a6	[0x38]	mtspr  LR, r0
	38210020	[0x3c]	addi  r1, r1, 32
	4e800020	[0x40]	bclr always, CRF7[SO]
>>>> Method: <init>, accAndPropFlags: 1
build intervals for <init>
assign registers to parameters, nofParam = 1
[(Ref)r2]
allocate registers
SSA for Method: <init>
   SSANode 0:
      EntrySet {[ ], [ ]}
         0: NoOpnd[sCloadLocal] (Ref),   end=1, index=1, reg=2
         1: Call[sCcall] {0} (Void),   <init>,   end=1
         2: Branch[sCreturn]  (Void)
      ExitSet {[ ], [ 0 (Ref) ]}

Code for Method: <init>
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	c820000	[0xc]	twi  ifequal, r2, 0
	8062fffc	[0x10]	lwz  r3, -4(r2)
	80630000	[0x14]	lwz  r3, 0(r3)
	7c6803a6	[0x18]	mtspr  LR, r3
	4e800020	[0x1c]	bclr always, CRF7[SO]
	8001000c	[0x20]	lwz  r0, 12(r1)
	7c0803a6	[0x24]	mtspr  LR, r0
	38210010	[0x28]	addi  r1, r1, 16
	4e800020	[0x2c]	bclr always, CRF7[SO]
