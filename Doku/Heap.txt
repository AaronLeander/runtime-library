public class Heap {
	static private int heapBase;
	static private int heapPtr;

	// called by new
	private static int newObject(int ref) {
		int size = US.GET4(ref) + 8;
		int addr = heapPtr;
		while (addr < heapPtr + size) US.PUT4(addr, 0);
		US.PUT4(heapPtr + 4, ref);	// write tag
		ref = heapPtr + 8;
		heapPtr += ((size + 15) >> 4) << 4;
		return ref;
	}

	// called by newarray
	private static int newPrimTypeArray(int nofElements, int type) {
		int elementSize;
		if (type == 7 || type == 11) elementSize = 8;
		else if (type == 6 || type == 10) elementSize = 4;
		else if (type == 5 || type == 9) elementSize = 2;
		else elementSize = 1;
		int size = nofElements * elementSize + 8;
		int addr = heapPtr;
		while (addr < heapPtr + size) US.PUT4(addr, 0);
		US.PUT4(heapPtr + 4, type);	// write tag
		US.PUT2(heapPtr + 2, nofElements);	// write length
		int ref = heapPtr + 8;
		heapPtr += ((size + 15) >> 4) << 4;
		return ref;
	}

build intervals for <clinit>
assign registers to parameters, nofParam = 0
[]
allocate registers
SSA for Method: <clinit>
   SSANode 0:
      EntrySet {[ ]}
         0: NoOpnd[sCloadConst] 100 (Integer),   end=1, reg=2
         1: Call[sCcall] {0} (Integer),   GET4,   end=2, reg=2
         2: MonadicRef[sCstoreToField] {1} {heapBase} (Void),   end=2
         3: NoOpndRef[sCloadFromField] {heapBase} (Integer),   end=4, reg=2
         4: MonadicRef[sCstoreToField] {3} {heapPtr} (Void),   end=4
         5: Branch[sCreturn]  (Void)
      ExitSet {[ ]}

Code for Method: <clinit>
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	38400064	[0xc]	li  r2, 100
	80420000	[0x10]	lwz  r2, 0(r2)
	38600000	[0x14]	li  r3, 0
	3c630000	[0x18]	addis  r3, r3, 0
	90430000	[0x1c]	stw  r2, 0(r3)
	38400005	[0x20]	li  r2, 5
	3c420000	[0x24]	addis  r2, r2, 0
	80420000	[0x28]	lwz  r2, 0(r2)
	38600008	[0x2c]	li  r3, 8
	3c630000	[0x30]	addis  r3, r3, 0
	90430004	[0x34]	stw  r2, 4(r3)
	8001000c	[0x38]	lwz  r0, 12(r1)
	7c0803a6	[0x3c]	mtspr  LR, r0
	38210010	[0x40]	addi  r1, r1, 16
	4e800020	[0x44]	bclr always, CRF7[SO]
>>>> Method: newObject, accAndPropFlags: 1000000a
build intervals for newObject
assign registers to parameters, nofParam = 1
[(Integer)r2]
allocate registers
register reserved for phi function at 9 reg = 3
register reserved for phi function at 10 reg = 4
SSA for Method: newObject
   SSANode 0:
      EntrySet {[ , , ], [ , , ]}
         0: NoOpnd[sCloadLocal] (Integer),   end=8, index=3, reg=2, join={8}
         1: Call[sCcall] {0} (Integer),   GET4,   end=3, reg=3
         2: NoOpnd[sCloadConst] 8 (Integer),   end=3
         3: Dyadic[sCadd] {1, 2} (Integer),   end=9, index=4, reg=3, join={9}
         4: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=10, index=5, reg=4, join={10}
         5: Branch[sCBranch]  (Void)
      ExitSet {[ , , ], [ 0 (Integer), 3 (Integer), 4 (Integer) ]}

   SSANode 1:
      EntrySet {[ , , ], [ 8 (Integer), 9 (Integer), 10 (Integer) ]}
         6: NoOpnd[sCloadConst] 0 (Integer),   end=7, reg=5
         7: Call[sCcall] {10, 6} (Void),   PUT4,   end=7
      ExitSet {[ , , ], [ 8 (Integer), 9 (Integer), 10 (Integer) ]}

   SSANode 2:
      EntrySet {[ , , ], [ 8 (Integer), 9 (Integer), 10 (Integer) ]}
         8: PhiFunction[sCPhiFunc] {0} (Integer),   start=0, end=17, index=3, reg=2 deleted
         9: PhiFunction[sCPhiFunc] {3} (Integer),   start=3, end=23, index=4, reg=3 deleted
         10: PhiFunction[sCPhiFunc] {4} (Integer),   start=4, end=13, index=5, reg=4 deleted
         11: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=12, reg=5
         12: Dyadic[sCadd] {11, 9} (Integer),   end=13, reg=5
         13: Branch[sCBranch] {12, 10} (Void)
      ExitSet {[ , , ], [ 8 (Integer), 9 (Integer), 10 (Integer) ]}

   SSANode 3:
      EntrySet {[ , , ], [ 8 (Integer), 9 (Integer), 10 (Integer) ]}
         14: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=16, reg=4
         15: NoOpnd[sCloadConst] 4 (Integer),   end=16
         16: Dyadic[sCadd] {14, 15} (Integer),   end=17, reg=4
         17: Call[sCcall] {16, 8} (Void),   PUT4,   end=17
         18: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=20, reg=2
         19: NoOpnd[sCloadConst] 8 (Integer),   end=20
         20: Dyadic[sCadd] {18, 19} (Integer),   end=30, index=3, reg=2
         21: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=28, reg=4
         22: NoOpnd[sCloadConst] 15 (Integer),   end=23
         23: Dyadic[sCadd] {9, 22} (Integer),   end=25, reg=3
         24: NoOpnd[sCloadConst] 4 (Integer),   end=25
         25: Dyadic[sCshr] {23, 24} (Integer),   end=27, reg=3
         26: NoOpnd[sCloadConst] 4 (Integer),   end=27
         27: Dyadic[sCshl] {25, 26} (Integer),   end=28, reg=3
         28: Dyadic[sCadd] {21, 27} (Integer),   end=29, reg=3
         29: MonadicRef[sCstoreToField] {28} {heapPtr} (Void),   end=29
         30: Branch[sCreturn] {20} (Void)
      ExitSet {[ , , ], [ 20 (Integer), 9 (Integer), 10 (Integer) ]}

Code for Method: newObject
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	80620000	[0xc]	lwz  r3, 0(r2)
	38630008	[0x10]	addi  r3, r3, 8
	38800000	[0x14]	li  r4, 0
	3c840000	[0x18]	addis  r4, r4, 0
	80840004	[0x1c]	lwz  r4, 4(r4)
	4800000c	[0x20]	b  12, [0x2c]
	38a00000	[0x24]	li  r5, 0
	90a40000	[0x28]	stw  r5, 0(r4)
	38a00005	[0x2c]	li  r5, 5
	3ca50000	[0x30]	addis  r5, r5, 0
	80a50004	[0x34]	lwz  r5, 4(r5)
	7ca51a14	[0x38]	add  r5, r5, r3
	7c042800	[0x3c]	cmp crf0, 0, r4, r5
	419fffe4	[0x40]	bc  iftrue, CRF0[LT], -28, [0x24]
	3880000b	[0x44]	li  r4, 11
	3c840000	[0x48]	addis  r4, r4, 0
	80840004	[0x4c]	lwz  r4, 4(r4)
	38840004	[0x50]	addi  r4, r4, 4
	90440000	[0x54]	stw  r2, 0(r4)
	38400011	[0x58]	li  r2, 17
	3c420000	[0x5c]	addis  r2, r2, 0
	80420004	[0x60]	lwz  r2, 4(r2)
	38420008	[0x64]	addi  r2, r2, 8
	38800016	[0x68]	li  r4, 22
	3c840000	[0x6c]	addis  r4, r4, 0
	80840004	[0x70]	lwz  r4, 4(r4)
	3863000f	[0x74]	addi  r3, r3, 15
	7c632670	[0x78]	srawi  r3, r3, 4
	54632036	[0x7c]	rlwinm  r3, r3, 4, 0, 27
	7c641a14	[0x80]	add  r3, r4, r3
	3880001a	[0x84]	li  r4, 26
	3c840000	[0x88]	addis  r4, r4, 0
	90640004	[0x8c]	stw  r3, 4(r4)
	8001000c	[0x90]	lwz  r0, 12(r1)
	7c0803a6	[0x94]	mtspr  LR, r0
	38210010	[0x98]	addi  r1, r1, 16
	4e800020	[0x9c]	bclr always, CRF7[SO]
>>>> Method: newPrimTypeArray, accAndPropFlags: 1000000a
build intervals for newPrimTypeArray
assign registers to parameters, nofParam = 2
[(Integer)r2, (Integer)r3]
allocate registers
register reserved for phi function at 20 reg = 4
register reserved for phi function at 32 reg = 5
register reserved for phi function at 33 reg = 6
register reserved for phi function at 34 reg = 4
SSA for Method: newPrimTypeArray
   SSANode 0:
      EntrySet {[ , , ], [ , , , , , ]}
         0: NoOpnd[sCloadLocal] (Integer),   end=30, index=4, reg=3, join={30}
         1: NoOpnd[sCloadConst] 7 (Integer),   end=2
         2: Branch[sCBranch] {1, 0} (Void)
      ExitSet {[ , , ], [ , 0 (Integer), , , , ]}

   SSANode 1:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         3: NoOpnd[sCloadConst] 11 (Integer),   end=4
         4: Branch[sCBranch] {3, 0} (Void)
      ExitSet {[ , , ], [ , 0 (Integer), , , , ]}

   SSANode 2:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         5: NoOpnd[sCloadConst] 8 (Integer),   end=20, index=5, reg=4, join={20}
         6: Branch[sCBranch]  (Void)
      ExitSet {[ , , ], [ , 0 (Integer), 5 (Integer), , , ]}

   SSANode 3:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         7: NoOpnd[sCloadConst] 6 (Integer),   end=8
         8: Branch[sCBranch] {7, 0} (Void)
      ExitSet {[ , , ], [ , 0 (Integer), , , , ]}

   SSANode 4:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         9: NoOpnd[sCloadConst] 10 (Integer),   end=10
         10: Branch[sCBranch] {9, 0} (Void)
      ExitSet {[ , , ], [ , 0 (Integer), , , , ]}

   SSANode 5:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         11: NoOpnd[sCloadConst] 4 (Integer),   end=20, index=5, reg=4, join={20}
         12: Branch[sCBranch]  (Void)
      ExitSet {[ , , ], [ , 0 (Integer), 11 (Integer), , , ]}

   SSANode 6:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         13: NoOpnd[sCloadConst] 5 (Integer),   end=14
         14: Branch[sCBranch] {13, 0} (Void)
      ExitSet {[ , , ], [ , 0 (Integer), , , , ]}

   SSANode 7:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         15: NoOpnd[sCloadConst] 9 (Integer),   end=16
         16: Branch[sCBranch] {15, 0} (Void)
      ExitSet {[ , , ], [ , 0 (Integer), , , , ]}

   SSANode 8:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         17: NoOpnd[sCloadConst] 2 (Integer),   end=20, index=5, reg=4, join={20}
         18: Branch[sCBranch]  (Void)
      ExitSet {[ , , ], [ , 0 (Integer), 17 (Integer), , , ]}

   SSANode 9:
      EntrySet {[ , , ], [ , 0 (Integer), , , , ]}
         19: NoOpnd[sCloadConst] 1 (Integer),   end=20, index=5, reg=4, join={20}
      ExitSet {[ , , ], [ , 0 (Integer), 19 (Integer), , , ]}

   SSANode 10:
      EntrySet {[ , , ], [ , 0 (Integer), 20 (Integer), , , ]}
         20: PhiFunction[sCPhiFunc] {5, 11, 17, 19} (Integer),   start=5, end=31, index=5, reg=4, join={31}
         21: NoOpnd[sCloadLocal] (Integer),   end=29, index=3, reg=2, join={29}
         22: Dyadic[sCmul] {21, 20} (Integer),   end=24, reg=5
         23: NoOpnd[sCloadConst] 8 (Integer),   end=24
         24: Dyadic[sCadd] {22, 23} (Integer),   end=32, index=6, reg=5, join={32}
         25: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=33, index=7, reg=6, join={33}
         26: Branch[sCBranch]  (Void)
      ExitSet {[ , , ], [ 21 (Integer), 0 (Integer), 20 (Integer), 24 (Integer), 25 (Integer), ]}

   SSANode 11:
      EntrySet {[ , , ], [ 29 (Integer), 30 (Integer), 31 (Integer), 32 (Integer), 33 (Integer), Phi-Function(34) ]}
         27: NoOpnd[sCloadConst] 0 (Integer),   end=28, reg=7
         28: Call[sCcall] {33, 27} (Void),   PUT4,   end=28
      ExitSet {[ , , ], [ 29 (Integer), 30 (Integer), 31 (Integer), 32 (Integer), 33 (Integer), Phi-Function(34) ]}

   SSANode 12:
      EntrySet {[ , , ], [ 29 (Integer), 30 (Integer), 31 (Integer), 32 (Integer), 33 (Integer), Phi-Function(34) ]}
         29: PhiFunction[sCPhiFunc] {21} (Integer),   start=21, end=45, index=3, reg=2 deleted
         30: PhiFunction[sCPhiFunc] {0} (Integer),   start=0, end=41, index=4, reg=3 deleted
         31: PhiFunction[sCPhiFunc] {20} (Integer),   start=20, end=31, index=5, reg=4 deleted
         32: PhiFunction[sCPhiFunc] {24} (Integer),   start=24, end=51, index=6, reg=5 deleted
         33: PhiFunction[sCPhiFunc] {25} (Integer),   start=25, end=37, index=7, reg=6 deleted
         34: PhiFunction[sCPhiFunc] {34} (Phi-Function),   start=34, end=34, index=8, reg=4, join={34} deleted
         35: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=36, reg=4
         36: Dyadic[sCadd] {35, 32} (Integer),   end=37, reg=4
         37: Branch[sCBranch] {36, 33} (Void)
      ExitSet {[ , , ], [ 29 (Integer), 30 (Integer), 31 (Integer), 32 (Integer), 33 (Integer), Phi-Function(34) ]}

   SSANode 13:
      EntrySet {[ , , ], [ 29 (Integer), 30 (Integer), 31 (Integer), 32 (Integer), 33 (Integer), Phi-Function(34) ]}
         38: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=40, reg=4
         39: NoOpnd[sCloadConst] 4 (Integer),   end=40
         40: Dyadic[sCadd] {38, 39} (Integer),   end=41, reg=4
         41: Call[sCcall] {40, 30} (Void),   PUT4,   end=41
         42: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=44, reg=3
         43: NoOpnd[sCloadConst] 2 (Integer),   end=44
         44: Dyadic[sCadd] {42, 43} (Integer),   end=45, reg=3
         45: Call[sCcall] {44, 29} (Void),   PUT2,   end=45
         46: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=48, reg=2
         47: NoOpnd[sCloadConst] 8 (Integer),   end=48
         48: Dyadic[sCadd] {46, 47} (Integer),   end=58, index=8, reg=2
         49: NoOpndRef[sCloadFromField] {heapPtr} (Integer),   end=56, reg=3
         50: NoOpnd[sCloadConst] 15 (Integer),   end=51
         51: Dyadic[sCadd] {32, 50} (Integer),   end=53, reg=4
         52: NoOpnd[sCloadConst] 4 (Integer),   end=53
         53: Dyadic[sCshr] {51, 52} (Integer),   end=55, reg=4
         54: NoOpnd[sCloadConst] 4 (Integer),   end=55
         55: Dyadic[sCshl] {53, 54} (Integer),   end=56, reg=4
         56: Dyadic[sCadd] {49, 55} (Integer),   end=57, reg=3
         57: MonadicRef[sCstoreToField] {56} {heapPtr} (Void),   end=57
         58: Branch[sCreturn] {48} (Void)
      ExitSet {[ , , ], [ 29 (Integer), 30 (Integer), 31 (Integer), 32 (Integer), 33 (Integer), 48 (Integer) ]}

Code for Method: newPrimTypeArray
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	2c030007	[0xc]	cmpi  crf0, 0, r3, 7
	419d000c	[0x10]	bc  iftrue, CRF0[EQ], 12, [0x1c]
	2c03000b	[0x14]	cmpi  crf0, 0, r3, 11
	409d000c	[0x18]	bc  iffalse, CRF0[EQ], 12, [0x24]
	38800008	[0x1c]	li  r4, 8
	48000038	[0x20]	b  56, [0x58]
	2c030006	[0x24]	cmpi  crf0, 0, r3, 6
	419d000c	[0x28]	bc  iftrue, CRF0[EQ], 12, [0x34]
	2c03000a	[0x2c]	cmpi  crf0, 0, r3, 10
	409d000c	[0x30]	bc  iffalse, CRF0[EQ], 12, [0x3c]
	38800004	[0x34]	li  r4, 4
	48000020	[0x38]	b  32, [0x58]
	2c030005	[0x3c]	cmpi  crf0, 0, r3, 5
	419d000c	[0x40]	bc  iftrue, CRF0[EQ], 12, [0x4c]
	2c030009	[0x44]	cmpi  crf0, 0, r3, 9
	409d000c	[0x48]	bc  iffalse, CRF0[EQ], 12, [0x54]
	38800002	[0x4c]	li  r4, 2
	48000008	[0x50]	b  8, [0x58]
	38800001	[0x54]	li  r4, 1
	7ca221d6	[0x58]	mullw  r5, r2, r4
	38a50008	[0x5c]	addi  r5, r5, 8
	38c00000	[0x60]	li  r6, 0
	3cc60000	[0x64]	addis  r6, r6, 0
	80c60004	[0x68]	lwz  r6, 4(r6)
	4800000c	[0x6c]	b  12, [0x78]
	38e00000	[0x70]	li  r7, 0
	90e60000	[0x74]	stw  r7, 0(r6)
	38800018	[0x78]	li  r4, 24
	3c840000	[0x7c]	addis  r4, r4, 0
	80840004	[0x80]	lwz  r4, 4(r4)
	7c842a14	[0x84]	add  r4, r4, r5
	7c062000	[0x88]	cmp crf0, 0, r6, r4
	419fffe4	[0x8c]	bc  iftrue, CRF0[LT], -28, [0x70]
	3880001e	[0x90]	li  r4, 30
	3c840000	[0x94]	addis  r4, r4, 0
	80840004	[0x98]	lwz  r4, 4(r4)
	38840004	[0x9c]	addi  r4, r4, 4
	90640000	[0xa0]	stw  r3, 0(r4)
	38600024	[0xa4]	li  r3, 36
	3c630000	[0xa8]	addis  r3, r3, 0
	80630004	[0xac]	lwz  r3, 4(r3)
	38630002	[0xb0]	addi  r3, r3, 2
	b0430000	[0xb4]	sth  r2, 0(r3)
	38400029	[0xb8]	li  r2, 41
	3c420000	[0xbc]	addis  r2, r2, 0
	80420004	[0xc0]	lwz  r2, 4(r2)
	38420008	[0xc4]	addi  r2, r2, 8
	3860002e	[0xc8]	li  r3, 46
	3c630000	[0xcc]	addis  r3, r3, 0
	80630004	[0xd0]	lwz  r3, 4(r3)
	3885000f	[0xd4]	addi  r4, r5, 15
	7c842670	[0xd8]	srawi  r4, r4, 4
	54842036	[0xdc]	rlwinm  r4, r4, 4, 0, 27
	7c632214	[0xe0]	add  r3, r3, r4
	38800032	[0xe4]	li  r4, 50
	3c840000	[0xe8]	addis  r4, r4, 0
	90640004	[0xec]	stw  r3, 4(r4)
	8001000c	[0xf0]	lwz  r0, 12(r1)
	7c0803a6	[0xf4]	mtspr  LR, r0
	38210010	[0xf8]	addi  r1, r1, 16
	4e800020	[0xfc]	bclr always, CRF7[SO]
>>>> Method: newRefArray, accAndPropFlags: 1000000a
build intervals for newRefArray
assign registers to parameters, nofParam = 2
[(Ref)r2, (Integer)]
allocate registers
SSA for Method: newRefArray
   SSANode 0:
      EntrySet {[ ], [ , ]}
         0: NoOpnd[sCloadLocal] (Ref),   end=1, index=1, reg=2
         1: Branch[sCreturn] {0} (Void)
      ExitSet {[ ], [ 0 (Ref), ]}

Code for Method: newRefArray
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	8001000c	[0xc]	lwz  r0, 12(r1)
	7c0803a6	[0x10]	mtspr  LR, r0
	38210010	[0x14]	addi  r1, r1, 16
	4e800020	[0x18]	bclr always, CRF7[SO]
>>>> Method: newMultiDimArray, accAndPropFlags: 1000000a
build intervals for newMultiDimArray
assign registers to parameters, nofParam = 3
[(Ref)r2, (Integer), (Integer)]
allocate registers
SSA for Method: newMultiDimArray
   SSANode 0:
      EntrySet {[ ], [ , , ]}
         0: NoOpnd[sCloadConst] ,   end=1, index=1, reg=3
         1: Branch[sCreturn] {0} (Void)
      ExitSet {[ ], [ 0 (Ref), , ]}

Code for Method: newMultiDimArray
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	38600000	[0xc]	li  r3, 0
	3c630000	[0x10]	addis  r3, r3, 0
	7c621b78	[0x14]	lr  r2, r3
	8001000c	[0x18]	lwz  r0, 12(r1)
	7c0803a6	[0x1c]	mtspr  LR, r0
	38210010	[0x20]	addi  r1, r1, 16
	4e800020	[0x24]	bclr always, CRF7[SO]
>>>> Method: <init>, accAndPropFlags: 1
build intervals for <init>
assign registers to parameters, nofParam = 1
[(Ref)r2]
allocate registers
SSA for Method: <init>
   SSANode 0:
      EntrySet {[ ], [ ]}
         0: NoOpnd[sCloadLocal] (Ref),   end=1, index=1, reg=2
         1: Call[sCcall] {0} (Void),   <init>,   end=1
         2: Branch[sCreturn]  (Void)
      ExitSet {[ ], [ 0 (Ref) ]}

Code for Method: <init>
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	c820000	[0xc]	twi  ifequal, r2, 0
	8062fffc	[0x10]	lwz  r3, -4(r2)
	80630000	[0x14]	lwz  r3, 0(r3)
	7c6803a6	[0x18]	mtspr  LR, r3
	4e800020	[0x1c]	bclr always, CRF7[SO]
	8001000c	[0x20]	lwz  r0, 12(r1)
	7c0803a6	[0x24]	mtspr  LR, r0
	38210010	[0x28]	addi  r1, r1, 16
	4e800020	[0x2c]	bclr always, CRF7[SO]
